{"pages":[],"posts":[{"title":"","text":"List 接口List 接口的概述 接口的解释： ​ 有序的 collection，指的是存储元素和取出元素的顺序一致。 接口位置： ​ java.util.List 接口构造器： ​ 接口无构造器 接口方法： void add(int index,E element)在列表的指定位置插入指定元素（可选操作）。 E get(int index)返回列表中指定位置的元素。 E remove(int index)移除列表中指定位置的元素（可选操作）。 E set(int index,E element)用指定元素替换列表中指定位置的元素（可选操作）。 List 接口特点: 有序 可以存储重复元素 可以存储多个 null 值 带有索引，有的实现类的索引是指数组的索引，有的实现类的索引是通过某种数据结构模拟出来的编号。 4 种遍历方式 for 循环 增强 for collection 的 iterator 迭代器 List 接口提供了独特的迭代器，ListIterator ListIterator 是 Iterator 的子接口，增加了一些方法 List 特有的迭代器使用方法和 Iterator 一样 123ListIterator&lt;String&gt; listIterator = list.ListIterator();while(listIterator.hasNext()) sout(listIterator.next()) List 接口删除元素 按照正常的 for 循环删除元素会有缺点。当删除元素后，list.size()会减 1，而 list 整体的索引会改变，比如现在索引指向了 2，删除了索引为 2 的元素后，下一次循环索引 ++ 后是 3，但是 list 中未访问的元素向前挪动一位，它的索引是 2，这样就少遍历了一个元素。 1234List&lt;String&gt; list = new ArrayList&lt;&gt;();// 遍历for(i = 0; i &lt; list.size(); i++) sout(list.get(i)); 改进后的做法： 方法一 1234for(int i = 0; i &lt; list.size(); i++){ sout(list.get(i)); i--;} 方法二 123for(int i = list.size(); i &gt;= 0; i--){ sout(list.get(i));}","link":"/2020/10/23/List/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/10/23/hello-world/"},{"title":"","text":"ArrayListArrayList 类的概述 类的解释​ ArrayList 是 List 接口的实现类，底层数据结构是动态数组，当数组长度不够用时，会通过新建一个更大的数组来扩容。 类的位置​ java.util.ArrayList 类的构造器123456public ArrayList()// 构造一个初始容量为 10 的空列表。public ArrayList(Collection&lt;? extends E&gt; c)// 构造一个包含指定 collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序 排列的。public ArrayList(int initialCapacity)// 构造一个具有指定初始容量的空列表。 类的方法​ List 和 Collection 中的方法 ArrayList 集合的特点（源码分析） 符合 List 接口的特点 底层数据接口：可变数组 数据结构特点（相比 LinkedList）： 增删慢，需要移动元素 查询快 初始容量 public ArrayList() JDK7.0(包含)以后: 先初始化一个长度为 0 的空数组, 在第一次添加元素时, 初始化一个长度为 10 的数组 JDK6.0(包含)以前: 直接初始化一个长度为 10 的数组 public ArrayList(int initialCapacity)自定义初始容量 public ArrayList(Collection&lt;? extends E&gt; c)使用 Arrays.copyOf()方法创建一个和 c 相同大小的数组 线程不安全，效率高 扩容原理 第一次添加元素时: 初始化一个长度为 10 的数组 JDK7.0(包含)以后: 原来数组的长度 + (原来数组的长度 &gt;&gt; 1); JDK6.0(包含)以前:(原来数组的长度 * 3)/2 + 1;","link":"/2020/10/23/ArrayList/"},{"title":"我的第一篇博客.md","text":"Chapter 1 该写点什么呢？ Chapter 2 我在学 JavaSE。","link":"/2020/10/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2-md/"}],"tags":[],"categories":[]}